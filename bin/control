#!/bin/bash

source /etc/jelastic/environment;

sudo setcap 'cap_net_bind_service=+ep' /usr/sbin/httpd 2>/dev/null

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source "${OPENSHIFT_PYTHON_DIR}/versions/${OPENSHIFT_PYTHON_VERSION}/lib/create-virtenv"
source "${OPENSHIFT_PYTHON_DIR}/versions/${OPENSHIFT_PYTHON_VERSION}/lib/python_config"
OPENSHIFT_PYTHON_WSGI_APPLICATION="${OPENSHIFT_PYTHON_DIR}/ROOT/application";

HTTPD_CFG_FILE=${OPENSHIFT_PYTHON_DIR}/versions/${OPENSHIFT_PYTHON_VERSION}/etc/conf/httpd_nolog.conf
HTTPD_CFG_DIR=${OPENSHIFT_PYTHON_DIR}/versions/${OPENSHIFT_PYTHON_VERSION}/etc/conf.d/
ERB_HTTPD_CFG_DIR=${OPENSHIFT_PYTHON_DIR}/versions/${OPENSHIFT_PYTHON_VERSION}/etc/conf.d/
HTTPD_PASSENV_FILE=${HTTPD_CFG_DIR}passenv.conf
HTTPD_PID_FILE=${OPENSHIFT_PYTHON_DIR}run/httpd.pid

# construct the configuration directives for httpd
HTTPD_CMD_CONF="-f $HTTPD_CFG_FILE"
for dir in /etc/openshift/cart.conf.d/httpd{,/python} ; do
    [ -d $dir ] && HTTPD_CMD_CONF="$HTTPD_CMD_CONF -c 'Include $dir/*.conf'"
done

# For backwards compatibility
export APPDIR=$OPENSHIFT_PYTHON_DIR

function start_app() {
    echo "Starting Python ${OPENSHIFT_PYTHON_VERSION} cartridge (app.py server)"
    cd $OPENSHIFT_REPO_DIR \
      && nohup python -u app.py > "${OPENSHIFT_PYTHON_DIR}logs/appserver.log" 2>&1 &
    echo $! > ${OPENSHIFT_PYTHON_DIR}run/appserver.pid
}

function pre_start_apache_config {
    write_httpd_passenv $HTTPD_PASSENV_FILE
    select_python_document_root ${OPENSHIFT_REPO_DIR}
    select_python_wsgi_application ${OPENSHIFT_REPO_DIR}
}

function start_apache() {
    echo "Starting Python ${OPENSHIFT_PYTHON_VERSION} cartridge (Apache+mod_wsgi)"
    pre_start_apache_config
    ensure_valid_httpd_process "$HTTPD_PID_FILE" "$HTTPD_CFG_FILE"
    eval "/usr/sbin/httpd $HTTPD_CMD_CONF -k start" \
      && wait_for_pid_file $HTTPD_PID_FILE
}

function start() {
    [ ! -d "${OPENSHIFT_REPO_DIR}/logs" ] && { mkdir -p "${OPENSHIFT_REPO_DIR}/logs"; chown ${OPENSHIFT_GEAR_UUID}:${OPENSHIFT_GEAR_UUID} "${OPENSHIFT_REPO_DIR}/logs"   ;};
    [ ! -d "${OPENSHIFT_REPO_DIR}/etc" ] && mkdir -p "${OPENSHIFT_REPO_DIR}/etc";
    [ ! -f "${OPENSHIFT_REPO_DIR}/etc/magic" ] && cp "/etc/magic"  "${OPENSHIFT_REPO_DIR}/etc/magic";
    if [ -f "${OPENSHIFT_REPO_DIR}app.py" ]; then
        start_app
    else
        start_apache
    fi
    local requirements_file=${OPENSHIFT_PYTHON_REQUIREMENTS_PATH:-requirements.txt}
    if [ -f ${OPENSHIFT_REPO_DIR}/ROOT/${requirements_file} ]; then
        ( cd $OPENSHIFT_REPO_DIR; pip install --log /opt/repo/logs/pip.log --no-cache-dir -r ${OPENSHIFT_REPO_DIR}/ROOT/${requirements_file} 2>&1 )
    fi
    if [ -f ${OPENSHIFT_REPO_DIR}/ROOT/setup.py ]; then
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/ROOT/setup.py develop )
    fi
}

function stop_app() {
    if [ -s ${OPENSHIFT_PYTHON_DIR}run/appserver.pid ]; then
        kpid=$(cat ${OPENSHIFT_PYTHON_DIR}run/appserver.pid)
        iters=0
        while kill $kpid >/dev/null 2>&1; do
            iters=$(($iters + 1))
            [ $iters -gt 10 ] && break
            sleep 1
        done
        kill -KILL $kpid >/dev/null 2>&1 || :
        rm -f ${OPENSHIFT_PYTHON_DIR}run/appserver.pid
    fi
}

function stop_apache() {
    ensure_valid_httpd_process "$HTTPD_PID_FILE" "$HTTPD_CFG_FILE"
    if [ -f "$HTTPD_PID_FILE" ]; then
        httpd_pid=`cat "$HTTPD_PID_FILE" 2> /dev/null`
        eval "/usr/sbin/httpd $HTTPD_CMD_CONF -k stop" \
          && wait_for_stop $httpd_pid
    else
        echo "Server is already stopped";
    fi
}

function stop() {
    echo "Stopping Python ${OPENSHIFT_PYTHON_VERSION} cartridge"
    stop_apache
    stop_app
}


function restart() {
    echo "Restarting Python ${OPENSHIFT_PYTHON_VERSION} cartridge"
    if [ -f "${OPENSHIFT_REPO_DIR}app.py" ]; then
        stop_apache
        stop_app
        start_app
    else
        stop_app
        pre_start_apache_config
        ensure_httpd_restart_succeed "$HTTPD_PID_FILE" "$HTTPD_CFG_FILE"
        eval "/usr/sbin/httpd $HTTPD_CMD_CONF -k restart"
    fi
}

function status() {
    res=0
    if [ -f "${OPENSHIFT_REPO_DIR}app.py" ]; then
        output=$(curl -s -m 30 http://$OPENSHIFT_PYTHON_IP:$OPENSHIFT_PYTHON_PORT/ &> /dev/null) || res=1
    else
        output=$(curl -s -m 30 http://$OPENSHIFT_PYTHON_IP:$OPENSHIFT_PYTHON_PORT/server-status?auto 2>&1 ) || res=1
    fi
    if [ $res -eq 0 ]; then
        client_result "Application is running"
    else
        client_result "Application is either stopped or inaccessible"
    fi
}

# Clean up any log files
function tidy() {
    client_message "Emptying log dir: $OPENSHIFT_PYTHON_LOG_DIR"
    shopt -s dotglob
    rm -rf $OPENSHIFT_PYTHON_LOG_DIR/*
}

function build() {
    pip install --upgrade --no-cache-dir pip &>/dev/null;
    local requirements_file=${OPENSHIFT_PYTHON_REQUIREMENTS_PATH:-requirements.txt}
    if [ -f ${OPENSHIFT_REPO_DIR}/ROOT/${requirements_file} ]; then
        ( cd $OPENSHIFT_REPO_DIR; pip install --log /opt/repo/logs/pip.log --no-cache-dir -r ${OPENSHIFT_REPO_DIR}/ROOT/${requirements_file} 2>&1 1> /dev/null )
    fi

    if [ -f ${OPENSHIFT_REPO_DIR}/ROOT/setup.py ]; then
        ( cd $OPENSHIFT_REPO_DIR; python ${OPENSHIFT_REPO_DIR}/ROOT/setup.py develop )
    fi

}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  reload)    restart ;;
  status)    status ;;
  tidy)      tidy ;;
  build)     build ;;
  *)         exit 0
esac
